# for simplicity we are checking compilation and testing everything on the Ubuntu environment only.

name: testing_changes

on: 
    push:
      branches: [ "master" ]
    pull_request:
      branches: [ "master" ]
      types: [opened, reopened, synchronize, ready_for_review]
    release:
      types: [created, edited]
    workflow_dispatch:
      inputs:
        # See https://hub.docker.com/r/firebirdsql/firebird for supported versions/tags
        # and further details on input environment variables
        # you may only define up to 10 `inputs` for a `workflow_dispatch` event
        version:
          description: 'Version of firebirdsql to use: latest, 5, 5.0.2, 5-noble, 5-jammy, 4, 4.0.5, 3, 3.0.12. See: firebirdsql/firebird for a complete list of tags.'
          required: false
          default: 'latest'
        port:
          description: 'Optional port published in the host for connecting to the database. Default: 3050.'
          required: false
          default: '3050'
        firebird_database:
          description: 'Optional name for creating a database inside the container'
          required: false
          default: ''
        firebird_user:
          description: 'Optional name for creating a user that is database owner inside the container'
          required: false
          default: ''
        firebird_password:
          description: 'Optional password for the user created'
          required: false
          default: ''
        firebird_root_password:
          description: 'Default sysdba user password, if left blank Firebird installer generates a one-off password for SYSDBA instead'
          required: false
          default: ''
        timezone:
          description: 'Server TimeZone. (i.e. America/Sao_Paulo)'
          required: false
          default: ''
        firebird_conf:
          description: 'Comma separated list of settings to be set in `firebird.conf`. E.g.: `ConnectionTimeout=180,DeadlockTimeout=10`. See: https://firebirdsql.org/rlsnotesh/config-fb-conf.html'
          required: false
          default: ''
        container_name:
          description: 'The name for tagging the container. Default: firebirdsql'
          required: false
          default: 'firebirdsql'
        network_name:
          description: 'Optional name of the network for connecting the container'
          required: false
          default: ''

jobs:
  ci:
    name: ci-testing_changes
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-latest", "windows-latest", "macos-latest", "macos-13" ]
        # ubuntu-latest:  https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2404-Readme.md
        # macos-latest:   https://github.com/actions/runner-images/blob/main/images/macos/macos-15-arm64-Readme.md
        # macos-13:       https://github.com/actions/runner-images/blob/main/images/macos/macos-13-Readme.md
        # windows-latest: https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md
        target: [ 'latest', '5', '5.0.2', '5-noble', '5-jammy', '4', '4.0.5', '3', '3.0.12' ]
        # https://github.com/FirebirdSQL/firebird-docker
    runs-on: "${{ matrix.os }}"

    steps:
      - name: Testing release with FirebirdSQL version ${{ matrix.target }} triggered by version '${{ github.event.release.tag_name }}'
        if: github.event_name == 'release' && matrix.os == 'ubuntu-latest'
        uses: juarezr/firebirdsql-github-action@master
        with:
          version: '${{ matrix.target }}'
          firebird_database: 'my_database.fdb'
          firebird_user: 'my_user'
          firebird_password: 'my_password'

      - name: Checkout source code on event ${{ github.event_name }} triggered by '${{ github.sha }}'
        if: github.event_name != 'release'
        uses: actions/checkout@v3

      - name: Report Workflow Information
        id: workflow_report
        uses: ./.github/actions/workflow-info
        with:
          title: '${{ github.ref_name }}'
          parameters: '${{ toJson(inputs) }}'
          content: |
            - Ref: ${{ github.head_ref }}

      - name: Testing changes with FirebirdSQL version ${{ matrix.target }} on ${{ matrix.os }} triggered by '${{ github.event_name }}'
        if: github.event_name != 'release' && matrix.os == 'ubuntu-latest'
        uses: ./ # Uses an action in the root directory
        with:
          version: '${{ matrix.target }}'
          firebird_database: 'my_database.fdb'
          firebird_user: 'my_user'
          firebird_password: 'my_password'

      - name: Testing release with FirebirdSQL version ${{ matrix.target }} on '${{ matrix.os }}'
        if: github.event_name != 'release' && matrix.os != 'ubuntu-latest'
        shell: bash
        run: |
          export INPUT_CONTAINER_NAME='firebirdsql'
          export INPUT_FIREBIRD_DATABASE='localhost:/var/lib/firebird/data/my_database.fdb'
          export INPUT_FIREBIRD_USER='my_user'
          export INPUT_FIREBIRD_PASSWORD='my_password'
          export INPUT_FIREBIRD_CONF='ConnectionTimeout=180,DeadlockTimeout=10'
          echo "::group::Checkout Report"
          echo "PWD: ${PWD:-}"
          ls --escape --dereference-command-line --human-readable --time-style=iso --no-group --color=auto -la
          echo "::endgroup::"
          bash entrypoint.sh

      - name: Install FirebirdSQL clients
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends firebird3.0-utils libfbclient2

      - name: Wait for Firebird version ${{ matrix.target }} to be available  on ${{ matrix.os }}
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          for i in {0..120} ; do nc -z localhost 3050 && echo "Up: ${i} secs" && break; sleep 1; done

      - name: Testing Connection and Query with FirebirdSQL version ${{ matrix.target }}
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          echo 'SELECT * FROM rdb$roles;' | isql-fb -bail -quiet -z -user my_user -password my_password 'localhost:/var/lib/firebird/data/my_database.fdb'

      - name: Install Python driver
        shell: bash
        run: |
          python3 -m pip install --upgrade pip wheel
          python3 -m pip install firebird-driver
          python3 -m pip install rich typer

      - name: Testing Connection and Query with FirebirdSQL version ${{ matrix.target }} with python
        shell: bash
        run: |
          python3 test_connection.py --user my_user --password my_password --host localhost /var/lib/firebird/data/my_database.fdb

      - name: Stop Container
        run: |
          docker rm --volumes --force firebirdsql

# end of file
